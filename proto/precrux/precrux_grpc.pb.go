// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: proto/precrux/precrux.proto

package precrux

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrecruxClient is the client API for Precrux service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrecruxClient interface {
	// UnaryPrecrux is unary precrux.
	UnaryPrecrux(ctx context.Context, in *PrecruxRequest, opts ...grpc.CallOption) (*PrecruxResponse, error)
}

type precruxClient struct {
	cc grpc.ClientConnInterface
}

func NewPrecruxClient(cc grpc.ClientConnInterface) PrecruxClient {
	return &precruxClient{cc}
}

func (c *precruxClient) UnaryPrecrux(ctx context.Context, in *PrecruxRequest, opts ...grpc.CallOption) (*PrecruxResponse, error) {
	out := new(PrecruxResponse)
	err := c.cc.Invoke(ctx, "/chillyvee.precrux.Precrux/UnaryPrecrux", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrecruxServer is the server API for Precrux service.
// All implementations must embed UnimplementedPrecruxServer
// for forward compatibility
type PrecruxServer interface {
	// UnaryPrecrux is unary precrux.
	UnaryPrecrux(context.Context, *PrecruxRequest) (*PrecruxResponse, error)
	mustEmbedUnimplementedPrecruxServer()
}

// UnimplementedPrecruxServer must be embedded to have forward compatible implementations.
type UnimplementedPrecruxServer struct {
}

func (UnimplementedPrecruxServer) UnaryPrecrux(context.Context, *PrecruxRequest) (*PrecruxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryPrecrux not implemented")
}
func (UnimplementedPrecruxServer) mustEmbedUnimplementedPrecruxServer() {}

// UnsafePrecruxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrecruxServer will
// result in compilation errors.
type UnsafePrecruxServer interface {
	mustEmbedUnimplementedPrecruxServer()
}

func RegisterPrecruxServer(s grpc.ServiceRegistrar, srv PrecruxServer) {
	s.RegisterService(&Precrux_ServiceDesc, srv)
}

func _Precrux_UnaryPrecrux_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecruxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrecruxServer).UnaryPrecrux(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chillyvee.precrux.Precrux/UnaryPrecrux",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrecruxServer).UnaryPrecrux(ctx, req.(*PrecruxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Precrux_ServiceDesc is the grpc.ServiceDesc for Precrux service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Precrux_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chillyvee.precrux.Precrux",
	HandlerType: (*PrecruxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryPrecrux",
			Handler:    _Precrux_UnaryPrecrux_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/precrux/precrux.proto",
}
